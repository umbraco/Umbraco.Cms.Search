@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Umbraco.Cms.Search.Core
@using Umbraco.Cms.Search.Core.Models.Searching.Faceting
@using Umbraco.Cms.Core.Models
@inject IVariationContextAccessor VariationContextAccessor;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Site.ViewModels.SearchViewModel>
@{
	Layout = null;
	var contentAtRoot = Umbraco.ContentAtRoot().ToArray();
	var culture = Context.Request.Query["culture"].ToString();
	var segment = Context.Request.Query["segment"].ToString();
	VariationContextAccessor.VariationContext = new VariationContext(culture, segment);
}
<html xmlns="http://www.w3.org/1999/html" xmlns="http://www.w3.org/1999/html">
<head>
	<style>
		code {
			font-weight: bold;
		}
		table {
			border-collapse: collapse;
			width: 100%;
		}
		th, td {
			border:  1px solid silver;
			text-align: left;
			padding: 5px;
		}
	</style>
	<script>
		window.addEventListener('load', () => {

			init();
			
            document.forms[0].addEventListener('submit', (event) => {
				event.preventDefault();

				let query = `?query=${document.getElementById('query').value}`;
	            query += getFilter('Umb_PathIds');
				query += getFilter('integer');
				query += getFilter('date');
				query += getFilter('dropdown');
	            query += getFilter('title');
				query += getFilter('integerVariant');
				query += getFilter('dateVariant');
				query += getFilter('dropdownVariant');
	            query += getFilter('titleVariant');

				query += getFacet('integer');
				query += getFacet('dropdown');
	            query += getFacet('integerVariant');
	            query += getFacet('dropdownVariant');

				query += `&sortBy=${document.getElementById('sortBy').value}&sortDirection=${document.getElementById('sortDirection').value}`;

				query += `&culture=${document.getElementById('culture').value}&segment=${document.getElementById('segment').value}`
				
				window.location.href = `${window.location.href.split('?')[0]}${query}`;
			});
		});

		function init() {
			const searchParams = new URLSearchParams(window.location.search);
			if(searchParams.size === 0) {
				return;
			}

			document.getElementById('query').value = searchParams.get('query');

			const activeFilters = searchParams.getAll('filters');
			initFilter(activeFilters, 'Umb_PathIds');
			initFilter(activeFilters, 'integer');
			initFilter(activeFilters, 'date');
			initFilter(activeFilters, 'dropdown');
			initFilter(activeFilters, 'title');
			initFilter(activeFilters, 'integerVariant');
			initFilter(activeFilters, 'dateVariant');
			initFilter(activeFilters, 'dropdownVariant');
			initFilter(activeFilters, 'titleVariant');

			const activeFacets = searchParams.getAll('facets');
			initFacet(activeFacets, activeFilters, 'integer');
			initFacet(activeFacets, activeFilters, 'dropdown');
			initFacet(activeFacets, activeFilters, 'integerVariant');
			initFacet(activeFacets, activeFilters, 'dropdownVariant');
			
			initSelector(searchParams, 'culture');
			initSelector(searchParams, 'segment');
			initSelector(searchParams, 'sortBy');
			initSelector(searchParams, 'sortDirection');
		}

		function initFilter(activeFilters, qualifier) {
			document.getElementById(`${qualifier}Filter`).value = activeFilters.find((f) => f.startsWith(`${qualifier}:`))?.split(':')[1] ?? '';
		}

		function initFacet(activeFacets, activeFilters, qualifier) {
			document.getElementById(`${qualifier}AsFacet`).checked = activeFacets.includes(qualifier);

			if (!activeFacets.includes(qualifier)) {
				return;
			}
			const activeFilterValues = (activeFilters.find((f) => f.startsWith(`${qualifier}:`))?.split(':')[1] ?? '').split('|');
			const facetElements = document.getElementById(`${qualifier}FacetValues`).getElementsByTagName('input');
			for (let element of facetElements) {
				element.checked = activeFilterValues.includes(element.value);
			}
		}

		function initSelector(searchParams, elementId) {
			const value = searchParams.get(elementId)
			if (value) {
				document.getElementById(elementId).value = value;
			}
		}
		
		function getFilter(qualifier) {
			let filterValue = '';
			if (document.getElementById(`${qualifier}AsFacet`)?.checked) {
				const facetElements = document.getElementById(`${qualifier}FacetValues`)?.getElementsByTagName('input') ?? [];
				for (let element of facetElements) {
					if (element.checked) {
						filterValue += `${element.value}|`;
					}
				}
				if (filterValue) {
					filterValue = filterValue.slice(0, -1);
				}
			}
			else {
				filterValue = document.getElementById(`${qualifier}Filter`).value;
			}
			return filterValue ? `&filters=${qualifier}:${filterValue}` : '';
		}

		function getFacet(qualifier) {
			return document.getElementById(`${qualifier}AsFacet`).checked ? `&facets=${qualifier}` : '';
		}
	
	</script>
</head>
<body>
<h1>Search</h1>
<div style="display: flex">
	<div>
		<form method="get" style="display: flex; flex-direction: column; margin: 0">
			<fieldset>
				<legend>Scope</legend>
				<p>
					<label for="Umb_PathIdsFilter" style="display: block">Search across:</label>
					<select id="Umb_PathIdsFilter">
						@foreach (var root in contentAtRoot)
						{
							<option value="@root.Key">Descendants of @root.Name("en-US")</option>
						}
						<option value="">All content</option>
					</select>
				</p>
				<p>
					<label for="culture" style="display: block">Search for:</label>
					<select id="culture">
						<option value="en-US" selected>English (incl. invariant)</option>
						<option value="da-DK">Danish (incl. invariant)</option>
						<option value="">Invariant only</option>
					</select>
					<select id="segment">
						<option value="" selected>Default segment</option>
						<option value="seg-1">Segment "seg-1"</option>
						<option value="seg-2">Segment "seg-2"</option>
					</select>
				</p>
			</fieldset>
			<fieldset>
				<legend>Free text query</legend>
				<p>
					<input type="text" id="query" autocomplete="off"/>
				</p>
			</fieldset>
			<fieldset>
				<legend>Filtering</legend>
				<p style="margin-bottom: 0">
					Use <code>[upper,lower]</code> notation for range filtering.<br/>
					Use <code>one|two|three</code> notation for exact filtering.
				</p>
				<div style="display: flex;flex-direction: row; gap: 10px">
					<div>
						<p>
							<label for="integerFilter" style="display: block">Integer:</label>
							<input type="text" id="integerFilter" autocomplete="off"/>
						</p>
						<p>
							<label for="dateFilter" style="display: block">Date:</label>
							<input type="text" id="dateFilter" autocomplete="off"/>
						</p>
						<p>
							<label for="dropdownFilter" style="display: block">Dropdown:</label>
							<input type="text" id="dropdownFilter" autocomplete="off"/>
						</p>
						<p>
							<label for="titleFilter" style="display: block">Title:</label>
							<input type="text" id="titleFilter" autocomplete="off"/>
						</p>
					</div>
					<div>
						<p>
							<label for="integerVariantFilter" style="display: block">Integer (v):</label>
							<input type="text" id="integerVariantFilter" autocomplete="off"/>
						</p>
						<p>
							<label for="dateVariantFilter" style="display: block">Date (v):</label>
							<input type="text" id="dateVariantFilter" autocomplete="off"/>
						</p>
						<p>
							<label for="dropdownVariantFilter" style="display: block">Dropdown (v):</label>
							<input type="text" id="dropdownVariantFilter" autocomplete="off"/>
						</p>
						<p>
							<label for="titleVariantFilter" style="display: block">Title (v):</label>
							<input type="text" id="titleVariantFilter" autocomplete="off"/>
						</p>
					</div>
				</div>

			</fieldset>
			<fieldset>
				<legend>Faceting</legend>
				<p>
					Tick to use filters as facets.
				</p>
				<div style="display: flex">
					@{
						RenderExactFacetValues<int>("integer", "Integer");
						RenderExactFacetValues<string>("dropdown", "Dropdown");
					}
				</div>
				<div style="display: flex">
					@{
						RenderExactFacetValues<int>("integerVariant", "Integer (v)");
						RenderExactFacetValues<string>("dropdownVariant", "Dropdown (v)");
					}
				</div>

			</fieldset>
			<fieldset>
				<legend>Sorting</legend>
				<p>
					<label for="sortBy" style="display: block">Sort by:</label>
					<select id="sortBy">
						<option value="@Constants.FieldNames.Name" selected>Name [system field]</option>
						<option value="score">Score [system field]</option>
						<option value="@Constants.FieldNames.Level">Level [system field]</option>
						<option value="integer">Integer</option>
						<option value="date">Date</option>
						<option value="dropdown">Dropdown</option>
					</select>
					<select id="sortDirection">
						<option value="asc" selected>Ascending</option>
						<option value="desc">Descending</option>
					</select>
				</p>
			</fieldset>
			<button type="submit" style="margin: 10px">Search 🔍</button>
			<button type="button" style="margin: 10px" onclick="document.location.href = '.'">Clear ❌</button>
		</form>
	</div>
	@if (Model.Documents is not null)
	{
		<div style="display: flex">
			<fieldset style="flex-direction: column">
				<legend>Search results (@Model.Documents.Length of @Model.Total)</legend>
				@foreach (var document in Model.Documents)
				{
					<h3>@document.Name <small>(variation: @document.ContentType.Variations)</small></h3>
					<table>
						<thead>
						<tr>
							<th>Integer</th>
							<th>Date</th>
							<th>Dropdown</th>
							<th>Title</th>
							@if (document.ContentType.Variations is not ContentVariation.Nothing)
							{
								<th>Integer (v)</th>
								<th>Date (v)</th>
								<th>Dropdown (v)</th>
								<th>Title (v)</th>
							}
						</tr>
						</thead>
						<tbody>
						<tr>
							<td>@document.Value("integer")</td>
							<td>@document.Value("date")</td>
							<td>@(string.Join(", ", document.Value<string[]>("dropdown") ?? []))</td>
							<td>@document.Value("title")</td>
							@if (document.ContentType.Variations is not ContentVariation.Nothing)
							{
								<td>@document.Value("integerVariant")</td>
								<td>@document.Value("dateVariant")</td>
								<td>@(string.Join(", ", document.Value<string[]>("dropdownVariant") ?? []))</td>
								<td>@document.Value("titleVariant")</td>
							}
						</tr>
						</tbody>
					</table>
				}
			</fieldset>
		</div>
	}
</div>
</body>
</html>

@{
	void RenderExactFacetValues<T>(string fieldName, string label)
	{
		<div style="flex: 1">
			<p>
				<input type="checkbox" id="@(fieldName)AsFacet"/> <label for="@(fieldName)AsFacet">@label</label>
			</p>
			@{
				var facetResult = Model.Facets?.FirstOrDefault(f => f.FieldName == fieldName);
				if (facetResult is not null)
				{
					<ul id="@(fieldName)FacetValues">
						@foreach (var exactFacetValue in facetResult.Values.OfType<ExactFacetValue<T>>())
						{
							<li>
								<input type="checkbox" value="@exactFacetValue.Key" id="@(fieldName)Facet_@(exactFacetValue.Key)"/>
								<label for="@(fieldName)Facet_@(exactFacetValue.Key)">@exactFacetValue.Key (@exactFacetValue.Count)</label>
							</li>
						}
					</ul>
				}
			}
		</div>
	}
}